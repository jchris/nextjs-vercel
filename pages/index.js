import Head from 'next/head'
import Image from 'next/image'
import { Inter } from '@next/font/google'
import styles from '@/styles/Home.module.css'
import * as Client from '@ucanto/client'
import { ed25519 } from "@ucanto/principal"
import * as CAR from "@ucanto/transport/car"
import * as CBOR from "@ucanto/transport/cbor"
import * as HTTP from "@ucanto/transport/http"


import { useEffect } from 'react'

const SERVICE_DID = 'did:key:z6MkihSXLdVtpyesztTVX1jwjiizVcYKxvqPZdt5wkiEGt61'
const SERVICE_URL = 'http://localhost:3000/api'
const CLIENT_SECRET = 'MgCZHK1b9k2hX2b8HOV3pHuo9XESwWNxU7urEnKlUSzRsPu0BPxC6HX8GIxwbb3ymgUsIYWHgxRxDqEWDUgLhSzRZDdY='
    // TODO load a client keypair from local storage 
    // or generate a new one if none exists
    // POST the client DID to the service delegate endpoint
    // to get a delegation to invoke the echo capability

const inter = Inter({ subsets: ['latin'] })
export default function Home() {
  useEffect(() => { 
    // parse the client secret to create an issuer
    const issuer = ed25519.Signer.parse(CLIENT_SECRET)

    // parse the SERVICE_DID into a principal
    const servicePrincipal = ed25519.Verifier.parse(SERVICE_DID)


    // get a delegation from the delegate endpoint
    // TODO POST the client DID to the service delegate endpoint
    // to get a delegation to invoke the echo capability
    
    async function getDelegation(connection) {
      const delegz = await fetch(`${SERVICE_URL}/delegate`)
      console.log({delegz})
    }

    // invoke the echo capability
    // console.log({issuer})
    async function doInvoke(connection) {
      const delegation = await(getDelegation(connection))
      const invocation = await Client.invoke({
        issuer,
        audience: servicePrincipal,
        capability : {
          can : 'echo/did',
          with : 'https://example.com'
        },
        proofs: [delegation]
      })

      console.log('invocation', invocation)
      const result = await connection.execute([invocation])
      console.log('result', result)
    }
    // console.log({SERVICE_URL})
    const connection = Client.connect({
      encoder: CAR, // encode as CAR because server decods from car
      decoder: CBOR, // decode as CBOR because server encodes as CBOR
      channel: HTTP.open({ url: new URL(SERVICE_URL) })
    })
    console.log("useEffect invoke", connection)
    doInvoke(connection)
  }, [])

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.description}>
          <p>
            Get started by editing&nbsp;
            <code className={styles.code}>pages/index.js</code>
          </p>
          <div>
            <a
              href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
              target="_blank"
              rel="noopener noreferrer"
            >
              By{' '}
              <Image
                src="/vercel.svg"
                alt="Vercel Logo"
                className={styles.vercelLogo}
                width={100}
                height={24}
                priority
              />
            </a>
          </div>
        </div>

        <div className={styles.center}>
          <Image
            className={styles.logo}
            src="/next.svg"
            alt="Next.js Logo"
            width={180}
            height={37}
            priority
          />
          <div className={styles.thirteen}>
            <Image
              src="/thirteen.svg"
              alt="13"
              width={40}
              height={31}
              priority
            />
          </div>
        </div>

        <div className={styles.grid}>
          <a
            href="https://nextjs.org/docs?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
            target="_blank"
            rel="noopener noreferrer"
          >
            <h2 className={inter.className}>
              Docs <span>-&gt;</span>
            </h2>
            <p className={inter.className}>
              Find in-depth information about Next.js features and&nbsp;API.
            </p>
          </a>

          <a
            href="https://nextjs.org/learn?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
            target="_blank"
            rel="noopener noreferrer"
          >
            <h2 className={inter.className}>
              Learn <span>-&gt;</span>
            </h2>
            <p className={inter.className}>
              Learn about Next.js in an interactive course with&nbsp;quizzes!
            </p>
          </a>

          <a
            href="https://vercel.com/templates?framework=next.js&utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
            target="_blank"
            rel="noopener noreferrer"
          >
            <h2 className={inter.className}>
              Templates <span>-&gt;</span>
            </h2>
            <p className={inter.className}>
              Discover and deploy boilerplate example Next.js&nbsp;projects.
            </p>
          </a>

          <a
            href="https://vercel.com/new?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
            target="_blank"
            rel="noopener noreferrer"
          >
            <h2 className={inter.className}>
              Deploy <span>-&gt;</span>
            </h2>
            <p className={inter.className}>
              Instantly deploy your Next.js site to a shareable URL
              with&nbsp;Vercel.
            </p>
          </a>
        </div>
      </main>
    </>
  )
}
